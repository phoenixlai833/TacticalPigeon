const cardsContainer=document.querySelector(".card-carousel"),cardsController=document.querySelector(".card-carousel + .card-controller");class DraggingEvent{constructor(e){this.target=e}event(e){let t;this.target.addEventListener("mousedown",s=>{function n(){window.removeEventListener("mousemove",t),window.removeEventListener("mouseup",n),document.removeEventListener("mouseleave",n),t(null)}s.preventDefault(),t=e(s),window.addEventListener("mousemove",t),document.addEventListener("mouseleave",n),window.addEventListener("mouseup",n)}),this.target.addEventListener("touchstart",s=>{function n(){window.removeEventListener("touchmove",t),window.removeEventListener("touchend",n),t(null)}t=e(s),window.addEventListener("touchmove",t),window.addEventListener("touchend",n),document.body.addEventListener("mouseleave",n)})}getDistance(e){this.event(function(t){let s,n;return"touches"in t?(s=t.touches[0].clientX,n=t.touches[0].clientY):(s=t.clientX,n=t.clientY),function(t){return e(null===t?null:"touches"in t?{x:t.touches[0].clientX-s,y:t.touches[0].clientY-n}:{x:t.clientX-s,y:t.clientY-n})}})}}class CardCarousel extends DraggingEvent{constructor(e,t){super(e),this.container=e,this.controllerElement=t,this.cards=e.querySelectorAll(".card"),this.centerIndex=(this.cards.length-1)/2,this.cardWidth=this.cards[0].offsetWidth/this.container.offsetWidth*100,this.xScale={},window.addEventListener("resize",this.updateCardWidth.bind(this)),this.controllerElement&&this.controllerElement.addEventListener("keydown",this.controller.bind(this)),this.build(),super.getDistance(this.moveCards.bind(this))}updateCardWidth(){this.cardWidth=this.cards[0].offsetWidth/this.container.offsetWidth*100,this.build()}build(e=0){for(let e=0;e<this.cards.length;e++){const t=e-this.centerIndex,s=this.calcScale(t),n=this.calcScale2(t),i=-Math.abs(e-this.centerIndex),c=this.calcPos(t,n);this.xScale[t]=this.cards[e],this.updateCards(this.cards[e],{x:t,scale:s,leftPos:c,zIndex:i})}}controller(e){const t={...this.xScale};if(39===e.keyCode)for(let e in this.xScale){t[parseInt(e)-1<-this.centerIndex?this.centerIndex:parseInt(e)-1]=this.xScale[e]}if(37==e.keyCode)for(let e in this.xScale){t[parseInt(e)+1>this.centerIndex?-this.centerIndex:parseInt(e)+1]=this.xScale[e]}this.xScale=t;for(let e in t){const t=this.calcScale(e),s=this.calcScale2(e),n=this.calcPos(e,s),i=-Math.abs(e);this.updateCards(this.xScale[e],{x:e,scale:t,leftPos:n,zIndex:i})}}calcPos(e,t){let s;return s=e<0?(100*t-this.cardWidth)/2:100-(100*t+this.cardWidth)/2}updateCards(e,t){(t.x||0==t.x)&&e.setAttribute("data-x",t.x),(t.scale||0==t.scale)&&(e.style.transform=`scale(${t.scale})`,0==t.scale?e.style.opacity=t.scale:e.style.opacity=1),t.leftPos&&(e.style.left=`${t.leftPos}%`),(t.zIndex||0==t.zIndex)&&(0==t.zIndex?e.classList.add("highlight"):e.classList.remove("highlight"),e.style.zIndex=t.zIndex)}calcScale2(e){let t;return e<=0?t=1- -.6*e:e>0?t=1-.6*e:void 0}calcScale(e){const t=1-.2*Math.pow(e,2);return t<=0?0:t}checkOrdering(e,t,s){const n=parseInt(e.dataset.x),i=Math.round(s);let c=t;t!==t+i&&(t+i>n?t+i>this.centerIndex&&(c=t+i-1-this.centerIndex-i-this.centerIndex):t+i<n&&t+i<-this.centerIndex&&(c=t+i+1+this.centerIndex-i+this.centerIndex),this.xScale[c+i]=e);const a=-Math.abs(c+i);return this.updateCards(e,{zIndex:a}),c}moveCards(e){let t;if(null!=e)this.container.classList.remove("smooth-return"),t=e.x/350;else{this.container.classList.add("smooth-return"),t=0;for(let e in this.xScale)this.updateCards(this.xScale[e],{x:e,zIndex:Math.abs(Math.abs(e)-this.centerIndex)})}for(let e=0;e<this.cards.length;e++){const s=this.checkOrdering(this.cards[e],parseInt(this.cards[e].dataset.x),t),n=this.calcScale(s+t),i=this.calcScale2(s+t),c=this.calcPos(s+t,i);this.updateCards(this.cards[e],{scale:n,leftPos:c})}}}const carousel=new CardCarousel(cardsContainer);